// Code generated by counterfeiter. DO NOT EDIT.
package identityfakes

import (
	"database/sql"
	"service/identity"
	"sync"
)

type FakeServiceInterface struct {
	FetchStub        func(id string) (*identity.Row, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		id string
	}
	fetchReturns struct {
		result1 *identity.Row
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 *identity.Row
		result2 error
	}
	CreateStub        func(id string) (*identity.Row, sql.Result, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		id string
	}
	createReturns struct {
		result1 *identity.Row
		result2 sql.Result
		result3 error
	}
	createReturnsOnCall map[int]struct {
		result1 *identity.Row
		result2 sql.Result
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInterface) Fetch(id string) (*identity.Row, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Fetch", []interface{}{id})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchReturns.result1, fake.fetchReturns.result2
}

func (fake *FakeServiceInterface) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeServiceInterface) FetchArgsForCall(i int) string {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].id
}

func (fake *FakeServiceInterface) FetchReturns(result1 *identity.Row, result2 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 *identity.Row
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) FetchReturnsOnCall(i int, result1 *identity.Row, result2 error) {
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 *identity.Row
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 *identity.Row
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Create(id string) (*identity.Row, sql.Result, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("Create", []interface{}{id})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createReturns.result1, fake.createReturns.result2, fake.createReturns.result3
}

func (fake *FakeServiceInterface) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeServiceInterface) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].id
}

func (fake *FakeServiceInterface) CreateReturns(result1 *identity.Row, result2 sql.Result, result3 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *identity.Row
		result2 sql.Result
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceInterface) CreateReturnsOnCall(i int, result1 *identity.Row, result2 sql.Result, result3 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *identity.Row
			result2 sql.Result
			result3 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *identity.Row
		result2 sql.Result
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ identity.ServiceInterface = new(FakeServiceInterface)
