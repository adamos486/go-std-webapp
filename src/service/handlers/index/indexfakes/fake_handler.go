// Code generated by counterfeiter. DO NOT EDIT.
package indexfakes

import (
	"net/http"
	"service/handlers/index"
	"sync"
)

type FakeHandler struct {
	HandlerStub        func(w http.ResponseWriter, req *http.Request)
	handlerMutex       sync.RWMutex
	handlerArgsForCall []struct {
		w   http.ResponseWriter
		req *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) Handler(w http.ResponseWriter, req *http.Request) {
	fake.handlerMutex.Lock()
	fake.handlerArgsForCall = append(fake.handlerArgsForCall, struct {
		w   http.ResponseWriter
		req *http.Request
	}{w, req})
	fake.recordInvocation("Handler", []interface{}{w, req})
	fake.handlerMutex.Unlock()
	if fake.HandlerStub != nil {
		fake.HandlerStub(w, req)
	}
}

func (fake *FakeHandler) HandlerCallCount() int {
	fake.handlerMutex.RLock()
	defer fake.handlerMutex.RUnlock()
	return len(fake.handlerArgsForCall)
}

func (fake *FakeHandler) HandlerArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.handlerMutex.RLock()
	defer fake.handlerMutex.RUnlock()
	return fake.handlerArgsForCall[i].w, fake.handlerArgsForCall[i].req
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handlerMutex.RLock()
	defer fake.handlerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ index.Handler = new(FakeHandler)
