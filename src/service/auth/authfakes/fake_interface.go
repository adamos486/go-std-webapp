// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"net/http"
	"service/auth"
	"sync"
)

type FakeInterface struct {
	AuthorizeStub        func(req *http.Request) (string, string, bool)
	authorizeMutex       sync.RWMutex
	authorizeArgsForCall []struct {
		req *http.Request
	}
	authorizeReturns struct {
		result1 string
		result2 string
		result3 bool
	}
	authorizeReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 bool
	}
	ValidateTokenHeaderStub        func(req *http.Request) (bool, error)
	validateTokenHeaderMutex       sync.RWMutex
	validateTokenHeaderArgsForCall []struct {
		req *http.Request
	}
	validateTokenHeaderReturns struct {
		result1 bool
		result2 error
	}
	validateTokenHeaderReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GenerateTokenStub        func(map[string]interface{}) (string, error)
	generateTokenMutex       sync.RWMutex
	generateTokenArgsForCall []struct {
		arg1 map[string]interface{}
	}
	generateTokenReturns struct {
		result1 string
		result2 error
	}
	generateTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterface) Authorize(req *http.Request) (string, string, bool) {
	fake.authorizeMutex.Lock()
	ret, specificReturn := fake.authorizeReturnsOnCall[len(fake.authorizeArgsForCall)]
	fake.authorizeArgsForCall = append(fake.authorizeArgsForCall, struct {
		req *http.Request
	}{req})
	fake.recordInvocation("Authorize", []interface{}{req})
	fake.authorizeMutex.Unlock()
	if fake.AuthorizeStub != nil {
		return fake.AuthorizeStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.authorizeReturns.result1, fake.authorizeReturns.result2, fake.authorizeReturns.result3
}

func (fake *FakeInterface) AuthorizeCallCount() int {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	return len(fake.authorizeArgsForCall)
}

func (fake *FakeInterface) AuthorizeArgsForCall(i int) *http.Request {
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	return fake.authorizeArgsForCall[i].req
}

func (fake *FakeInterface) AuthorizeReturns(result1 string, result2 string, result3 bool) {
	fake.AuthorizeStub = nil
	fake.authorizeReturns = struct {
		result1 string
		result2 string
		result3 bool
	}{result1, result2, result3}
}

func (fake *FakeInterface) AuthorizeReturnsOnCall(i int, result1 string, result2 string, result3 bool) {
	fake.AuthorizeStub = nil
	if fake.authorizeReturnsOnCall == nil {
		fake.authorizeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 bool
		})
	}
	fake.authorizeReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 bool
	}{result1, result2, result3}
}

func (fake *FakeInterface) ValidateTokenHeader(req *http.Request) (bool, error) {
	fake.validateTokenHeaderMutex.Lock()
	ret, specificReturn := fake.validateTokenHeaderReturnsOnCall[len(fake.validateTokenHeaderArgsForCall)]
	fake.validateTokenHeaderArgsForCall = append(fake.validateTokenHeaderArgsForCall, struct {
		req *http.Request
	}{req})
	fake.recordInvocation("ValidateTokenHeader", []interface{}{req})
	fake.validateTokenHeaderMutex.Unlock()
	if fake.ValidateTokenHeaderStub != nil {
		return fake.ValidateTokenHeaderStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.validateTokenHeaderReturns.result1, fake.validateTokenHeaderReturns.result2
}

func (fake *FakeInterface) ValidateTokenHeaderCallCount() int {
	fake.validateTokenHeaderMutex.RLock()
	defer fake.validateTokenHeaderMutex.RUnlock()
	return len(fake.validateTokenHeaderArgsForCall)
}

func (fake *FakeInterface) ValidateTokenHeaderArgsForCall(i int) *http.Request {
	fake.validateTokenHeaderMutex.RLock()
	defer fake.validateTokenHeaderMutex.RUnlock()
	return fake.validateTokenHeaderArgsForCall[i].req
}

func (fake *FakeInterface) ValidateTokenHeaderReturns(result1 bool, result2 error) {
	fake.ValidateTokenHeaderStub = nil
	fake.validateTokenHeaderReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) ValidateTokenHeaderReturnsOnCall(i int, result1 bool, result2 error) {
	fake.ValidateTokenHeaderStub = nil
	if fake.validateTokenHeaderReturnsOnCall == nil {
		fake.validateTokenHeaderReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.validateTokenHeaderReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) GenerateToken(arg1 map[string]interface{}) (string, error) {
	fake.generateTokenMutex.Lock()
	ret, specificReturn := fake.generateTokenReturnsOnCall[len(fake.generateTokenArgsForCall)]
	fake.generateTokenArgsForCall = append(fake.generateTokenArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	fake.recordInvocation("GenerateToken", []interface{}{arg1})
	fake.generateTokenMutex.Unlock()
	if fake.GenerateTokenStub != nil {
		return fake.GenerateTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateTokenReturns.result1, fake.generateTokenReturns.result2
}

func (fake *FakeInterface) GenerateTokenCallCount() int {
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	return len(fake.generateTokenArgsForCall)
}

func (fake *FakeInterface) GenerateTokenArgsForCall(i int) map[string]interface{} {
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	return fake.generateTokenArgsForCall[i].arg1
}

func (fake *FakeInterface) GenerateTokenReturns(result1 string, result2 error) {
	fake.GenerateTokenStub = nil
	fake.generateTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) GenerateTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateTokenStub = nil
	if fake.generateTokenReturnsOnCall == nil {
		fake.generateTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authorizeMutex.RLock()
	defer fake.authorizeMutex.RUnlock()
	fake.validateTokenHeaderMutex.RLock()
	defer fake.validateTokenHeaderMutex.RUnlock()
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Interface = new(FakeInterface)
