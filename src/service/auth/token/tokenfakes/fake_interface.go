// Code generated by counterfeiter. DO NOT EDIT.
package tokenfakes

import (
	"service/auth/token"
	"sync"
)

type FakeInterface struct {
	ValidateTokenStub        func(token string) (interface{}, bool, error)
	validateTokenMutex       sync.RWMutex
	validateTokenArgsForCall []struct {
		token string
	}
	validateTokenReturns struct {
		result1 interface{}
		result2 bool
		result3 error
	}
	validateTokenReturnsOnCall map[int]struct {
		result1 interface{}
		result2 bool
		result3 error
	}
	GenerateStub        func(input map[string]interface{}) (string, error)
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		input map[string]interface{}
	}
	generateReturns struct {
		result1 string
		result2 error
	}
	generateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterface) ValidateToken(token string) (interface{}, bool, error) {
	fake.validateTokenMutex.Lock()
	ret, specificReturn := fake.validateTokenReturnsOnCall[len(fake.validateTokenArgsForCall)]
	fake.validateTokenArgsForCall = append(fake.validateTokenArgsForCall, struct {
		token string
	}{token})
	fake.recordInvocation("ValidateToken", []interface{}{token})
	fake.validateTokenMutex.Unlock()
	if fake.ValidateTokenStub != nil {
		return fake.ValidateTokenStub(token)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.validateTokenReturns.result1, fake.validateTokenReturns.result2, fake.validateTokenReturns.result3
}

func (fake *FakeInterface) ValidateTokenCallCount() int {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	return len(fake.validateTokenArgsForCall)
}

func (fake *FakeInterface) ValidateTokenArgsForCall(i int) string {
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	return fake.validateTokenArgsForCall[i].token
}

func (fake *FakeInterface) ValidateTokenReturns(result1 interface{}, result2 bool, result3 error) {
	fake.ValidateTokenStub = nil
	fake.validateTokenReturns = struct {
		result1 interface{}
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeInterface) ValidateTokenReturnsOnCall(i int, result1 interface{}, result2 bool, result3 error) {
	fake.ValidateTokenStub = nil
	if fake.validateTokenReturnsOnCall == nil {
		fake.validateTokenReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 bool
			result3 error
		})
	}
	fake.validateTokenReturnsOnCall[i] = struct {
		result1 interface{}
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeInterface) Generate(input map[string]interface{}) (string, error) {
	fake.generateMutex.Lock()
	ret, specificReturn := fake.generateReturnsOnCall[len(fake.generateArgsForCall)]
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		input map[string]interface{}
	}{input})
	fake.recordInvocation("Generate", []interface{}{input})
	fake.generateMutex.Unlock()
	if fake.GenerateStub != nil {
		return fake.GenerateStub(input)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateReturns.result1, fake.generateReturns.result2
}

func (fake *FakeInterface) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *FakeInterface) GenerateArgsForCall(i int) map[string]interface{} {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return fake.generateArgsForCall[i].input
}

func (fake *FakeInterface) GenerateReturns(result1 string, result2 error) {
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) GenerateReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateStub = nil
	if fake.generateReturnsOnCall == nil {
		fake.generateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateTokenMutex.RLock()
	defer fake.validateTokenMutex.RUnlock()
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ token.Interface = new(FakeInterface)
